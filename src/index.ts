import { getChangedFilesWithContext } from './utils/contextExpander.js';
import { ensureProjectGroup } from './yuque/initGroup.js';
import { uploadReportToYuque } from './yuque/yuqueUpload.js';
import { runRulesOnFile } from './rules/rulesEngine.js';
import { aiReviewFile } from './ai/aiClient.js';
import { runQueue } from './queue/queueRunner.js';
import { ReportGenerator, type ReviewResult } from './reports/reportGenerator.js';
import { filterFiles, getFileTypeDescription } from './filters/fileFilter.js';

export type ReviewMode = 'static' | 'ai' | 'full';
export type RunOptions = { upload?: boolean };

export async function run(mode: ReviewMode = 'full', options?: RunOptions): Promise<void> {
  console.log(`üöÄ ÂêØÂä® AI ‰ª£Á†ÅÂÆ°Êü•Â∑•ÂÖ∑ (Ê®°Âºè: ${mode})...\n`);
  
  const allFiles = await getChangedFilesWithContext();
  
  if (allFiles.length === 0) {
    console.log('Ê≤°ÊúâÊ£ÄÊµãÂà∞Â∑≤ÂèòÊõ¥ÁöÑÊñá‰ª∂ÔºåÂÆ°Êü•ÁªìÊùü„ÄÇ');
    return;
  }
  
  // ËøáÊª§Êñá‰ª∂
  const { filtered: files, excluded } = filterFiles(allFiles);
  
  console.log(`Ê£ÄÊµãÂà∞ ${allFiles.length} ‰∏™ÂèòÊõ¥Êñá‰ª∂ÔºåËøáÊª§ÂêéÈúÄÂÆ°Êü• ${files.length} ‰∏™:`);
  files.forEach(file => {
    const fileType = getFileTypeDescription(file.filePath);
    console.log(`  - ${file.filePath} (${fileType})`);
  });
  
  if (excluded.length > 0) {
    console.log(`\n‚è≠Ô∏è  Â∑≤Ë∑≥Ëøá ${excluded.length} ‰∏™Êñá‰ª∂ (ÂõæÁâá„ÄÅÊñáÊ°£„ÄÅ‰æùËµñÁ≠â):`);
    excluded.slice(0, 5).forEach(filePath => console.log(`  - ${filePath}`));
    if (excluded.length > 5) {
      console.log(`  ... ËøòÊúâ ${excluded.length - 5} ‰∏™Êñá‰ª∂`);
    }
  }
  console.log();
  
  if (files.length === 0) {
    console.log('ÊâÄÊúâÊñá‰ª∂ÈÉΩÂ∑≤Ë¢´ËøáÊª§ÔºåÊó†ÈúÄÂÆ°Êü•„ÄÇ');
    return;
  }
  
  // ÂàùÂßãÂåñÊä•ÂëäÁîüÊàêÂô®
  const reportGenerator = new ReportGenerator();
  const results: ReviewResult[] = [];
  
  await runQueue(files, async (file) => {
    console.log(`\n[${results.length + 1}/${files.length}] Ê≠£Âú®ÂÆ°Êü•: ${file.filePath}`);
    
    // ÈùôÊÄÅËßÑÂàôÊ£ÄÊü•ÔºàÊâÄÊúâÊ®°ÂºèÈÉΩÊâßË°åÔºâ
    const ruleResults = runRulesOnFile(file);
    const ruleStatus = ruleResults.length === 0 ? '‚úÖ' : `‚ùå(${ruleResults.length})`;
    
    let aiResults = '';
    let aiStatus = '';
    
    // AI ÂÆ°Êü•Ôºà‰ªÖÂú® ai Êàñ full Ê®°Âºè‰∏ãÊâßË°åÔºâ
    if (mode === 'ai' || mode === 'full') {
      aiResults = await aiReviewFile(file);
      aiStatus = aiResults.includes('Ê®°ÊãüAIÂÆ°Êü•') || aiResults.includes('AIÂÆ°Êü•Â§±Ë¥•') ? '‚ö†Ô∏è ' : '‚úÖ';
    } else {
      aiResults = 'static Ê®°Âºè‰∏ãË∑≥Ëøá AI ÂÆ°Êü•';
      aiStatus = '‚è≠Ô∏è ';
    }
    
    // ÊòæÁ§∫ÁÆÄÊ¥ÅÁöÑÁªìÊûúÊëòË¶Å
    console.log(`    üìã ËßÑÂàôÊ£ÄÊü•: ${ruleStatus} | ü§ñ AIÂÆ°Êü•: ${aiStatus}`);
    
    // Êî∂ÈõÜÁªìÊûúÁî®‰∫éÊä•ÂëäÁîüÊàê
    results.push({
      filePath: file.filePath,
      ruleResults,
      aiResults
    });
  });
  
  // ÁîüÊàêÂπ∂‰øùÂ≠òÊä•Âëä
  const reportPath = reportGenerator.saveReport(results, mode);
  
  console.log(`\n‚ú® ‰ª£Á†ÅÂÆ°Êü•ÂÆåÊàêÔºÅ`);
  console.log(`üìÅ Êä•ÂëäÂ∑≤‰øùÂ≠òÂà∞: ${reportPath}`);

  // === Êñ∞Â¢ûÔºöËØ≠ÈõÄ‰∏ä‰º† ===
  if (options?.upload !== false) {
    try {
      const { repoId } = await ensureProjectGroup(); // È¶ñÊ¨°‰ºö‰∫§‰∫íÔºõCI Áî® YUQUE_REPO_ID Ë∑≥Ëøá‰∫§‰∫í
      const result = await uploadReportToYuque(reportPath, { repoId });
      console.log(`üßæ ËØ≠ÈõÄ‰∏ä‰º†ÂÆåÊàêÔºö${result.created ? 'Êñ∞Âª∫' : 'ËøΩÂä†'}„Ää${result.title}„Äã`);
    } catch (e: any) {
      console.warn('‚ö†Ô∏è ËØ≠ÈõÄ‰∏ä‰º†Â§±Ë¥•Ôºö', e?.message || e);
    }
  }
  
  // ÊòæÁ§∫ÁªüËÆ°ÊëòË¶Å
  const ruleIssuesCount = results.reduce((sum, r) => sum + r.ruleResults.length, 0);
  console.log(`üìä ÁªüËÆ°: ${results.length} ‰∏™Êñá‰ª∂Ôºå${ruleIssuesCount} ‰∏™ËßÑÂàôÈóÆÈ¢ò`);
}

// Áõ¥Êé•ËøêË°åÊó∂ÁöÑÈªòËÆ§Ë°å‰∏∫
if (import.meta.url === `file://${process.argv[1]}`) {
  run().catch(err => {
    console.error('‚ùå ÂÆ°Êü•ËøáÁ®ãÂá∫Èîô:', err);
    process.exit(1);
  });
}