import { SmartContextExpander } from './utils/smartContextExpander.js';
import { runRulesOnFile } from './rules/rulesEngine.js';
import { aiReviewFileWithSmartContext } from './ai/aiClient.js';
import { runQueue } from './queue/queueRunner.js';
import { ReportGenerator, type ReviewResult } from './reports/reportGenerator.js';
import { filterFiles, getFileTypeDescription } from './filters/fileFilter.js';

export type ReviewMode = 'static' | 'ai' | 'full';

export async function run(mode: ReviewMode = 'full'): Promise<void> {
  console.log(`üöÄ ÂêØÂä® AI ‰ª£Á†ÅÂÆ°Êü•Â∑•ÂÖ∑ (Êô∫ËÉΩÊ®°Âºè: ${mode})...\n`);
  
  // ÂàùÂßãÂåñÊô∫ËÉΩ‰∏ä‰∏ãÊñáÊâ©Â±ïÂô®Ôºà‰ΩøÁî®ÁéØÂ¢ÉÂèòÈáèÈÖçÁΩÆÔºâ
  const smartExpander = new SmartContextExpander();
  
  // Ëé∑ÂèñÊô∫ËÉΩ‰∏ä‰∏ãÊñáÊñá‰ª∂
  const smartFiles = await smartExpander.getChangedFilesWithSmartContext();
  
  if (smartFiles.length === 0) {
    console.log('Ê≤°ÊúâÊ£ÄÊµãÂà∞Â∑≤ÂèòÊõ¥ÁöÑÊñá‰ª∂ÔºåÂÆ°Êü•ÁªìÊùü„ÄÇ');
    return;
  }
  
  // ËøáÊª§Êñá‰ª∂ - ËΩ¨Êç¢‰∏∫ÊóßÊ†ºÂºèËøõË°åËøáÊª§
  const allFiles = smartFiles.map(f => ({ filePath: f.filePath, content: f.context.content }));
  const { filtered: filteredPaths, excluded } = filterFiles(allFiles);
  const filteredPathsSet = new Set(filteredPaths.map(f => f.filePath));
  const files = smartFiles.filter(f => filteredPathsSet.has(f.filePath));
  
  console.log(`Ê£ÄÊµãÂà∞ ${smartFiles.length} ‰∏™ÂèòÊõ¥Êñá‰ª∂ÔºåËøáÊª§ÂêéÈúÄÂÆ°Êü• ${files.length} ‰∏™:`);
  
  // ÊòæÁ§∫Token‰ºòÂåñÁªüËÆ°
  let totalOriginalTokens = 0;
  let totalOptimizedTokens = 0;
  
  files.forEach(file => {
    const fileType = getFileTypeDescription(file.filePath);
    const strategy = file.context.strategy;
    const tokenSaving = file.context.metadata.compressionRatio < 1.0 
      ? ` (ËäÇÁúÅ${Math.round((1 - file.context.metadata.compressionRatio) * 100)}%)`
      : '';
    
    console.log(`  - ${file.filePath} (${fileType}) [${strategy}]${tokenSaving}`);
    
    totalOriginalTokens += Math.round(file.analysis.fileSize * 8); // Á≤óÁï•‰º∞ÁÆóÂéüÂßãtokens
    totalOptimizedTokens += file.context.metadata.estimatedTokens;
  });
  
  if (excluded.length > 0) {
    console.log(`\n‚è≠Ô∏è  Â∑≤Ë∑≥Ëøá ${excluded.length} ‰∏™Êñá‰ª∂ (ÂõæÁâá„ÄÅÊñáÊ°£„ÄÅ‰æùËµñÁ≠â):`);
    excluded.slice(0, 5).forEach(filePath => console.log(`  - ${filePath}`));
    if (excluded.length > 5) {
      console.log(`  ... ËøòÊúâ ${excluded.length - 5} ‰∏™Êñá‰ª∂`);
    }
  }
  
  // ÊòæÁ§∫Token‰ºòÂåñÊÄªÁªì
  if (files.length > 0) {
    const totalSavingRatio = totalOriginalTokens > 0 
      ? Math.round((1 - totalOptimizedTokens / totalOriginalTokens) * 100)
      : 0;
    console.log(`\nüíæ Token‰ºòÂåñ: ${totalOptimizedTokens} / ${totalOriginalTokens} (ËäÇÁúÅ${totalSavingRatio}%)`);
  }
  console.log();
  
  if (files.length === 0) {
    console.log('ÊâÄÊúâÊñá‰ª∂ÈÉΩÂ∑≤Ë¢´ËøáÊª§ÔºåÊó†ÈúÄÂÆ°Êü•„ÄÇ');
    return;
  }
  
  // ÂàùÂßãÂåñÊä•ÂëäÁîüÊàêÂô®
  const reportGenerator = new ReportGenerator();
  const results: ReviewResult[] = [];
  
  await runQueue(files, async (file) => {
    console.log(`\n[${results.length + 1}/${files.length}] Ê≠£Âú®ÂÆ°Êü•: ${file.filePath}`);
    console.log(`    üîç Á≠ñÁï•: ${file.context.strategy} | üìä Token: ${file.context.metadata.estimatedTokens}`);
    
    // ÈùôÊÄÅËßÑÂàôÊ£ÄÊü•ÔºàÊâÄÊúâÊ®°ÂºèÈÉΩÊâßË°åÔºâ
    // ËΩ¨Êç¢‰∏∫ÊóßÊ†ºÂºè‰ª•ÂÖºÂÆπÁé∞ÊúâËßÑÂàôÂºïÊìé
    const legacyFile = { filePath: file.filePath, content: file.context.content };
    const ruleResults = runRulesOnFile(legacyFile);
    const ruleStatus = ruleResults.length === 0 ? '‚úÖ' : `‚ùå(${ruleResults.length})`;
    
    let aiResults = '';
    let aiStatus = '';
    
    // AI ÂÆ°Êü•Ôºà‰ªÖÂú® ai Êàñ full Ê®°Âºè‰∏ãÊâßË°åÔºâ
    if (mode === 'ai' || mode === 'full') {
      aiResults = await aiReviewFileWithSmartContext(file);
      aiStatus = aiResults.includes('Ê®°ÊãüAIÂÆ°Êü•') || aiResults.includes('AIÂÆ°Êü•Â§±Ë¥•') ? '‚ö†Ô∏è ' : '‚úÖ';
    } else {
      aiResults = 'static Ê®°Âºè‰∏ãË∑≥Ëøá AI ÂÆ°Êü•';
      aiStatus = '‚è≠Ô∏è ';
    }
    
    // ÊòæÁ§∫ÁÆÄÊ¥ÅÁöÑÁªìÊûúÊëòË¶Å
    console.log(`    üìã ËßÑÂàôÊ£ÄÊü•: ${ruleStatus} | ü§ñ AIÂÆ°Êü•: ${aiStatus}`);
    
    // Êî∂ÈõÜÁªìÊûúÁî®‰∫éÊä•ÂëäÁîüÊàê
    results.push({
      filePath: file.filePath,
      ruleResults,
      aiResults
    });
  });
  
  // ÁîüÊàêÂπ∂‰øùÂ≠òÊä•Âëä
  const reportPath = reportGenerator.saveReport(results, mode);
  
  console.log(`\n‚ú® ‰ª£Á†ÅÂÆ°Êü•ÂÆåÊàêÔºÅ`);
  console.log(`üìÅ Êä•ÂëäÂ∑≤‰øùÂ≠òÂà∞: ${reportPath}`);
  
  // ÊòæÁ§∫ÁªüËÆ°ÊëòË¶Å
  const ruleIssuesCount = results.reduce((sum, r) => sum + r.ruleResults.length, 0);
  console.log(`üìä ÁªüËÆ°: ${results.length} ‰∏™Êñá‰ª∂Ôºå${ruleIssuesCount} ‰∏™ËßÑÂàôÈóÆÈ¢ò`);
}

// Áõ¥Êé•ËøêË°åÊó∂ÁöÑÈªòËÆ§Ë°å‰∏∫
if (import.meta.url === `file://${process.argv[1]}`) {
  run().catch(err => {
    console.error('‚ùå ÂÆ°Êü•ËøáÁ®ãÂá∫Èîô:', err);
    process.exit(1);
  });
}